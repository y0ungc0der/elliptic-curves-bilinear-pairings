from random import randint
import math

def EllipticCurveGeneration(z, k):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–≤–æ–π —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–∏
    while True:
        # —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—è
        p = 4*z**2 + 1
        if p in Primes():
            # —á–∏—Å–ª–æ —Ç–æ—á–µ–∫
            r = 4*z**2 - 2*z + 1
            if r in Primes():
                # —Å–ª–µ–¥
                T = 1 + 2*z
                break
            # —á–∏—Å–ª–æ —Ç–æ—á–µ–∫
            else:
                r = 4*z**2 + 2*z + 1
                if r in Primes():
                    T = 1 - 2*z
                    break
        z = z + 1
    # –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç –º–Ω–∏–º–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞    
    D = 4*p - T**2
    print ("–°–ª–µ–¥ T = {}".format(T))
    print ("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—è p = {}".format(p))
    print ("–ß–∏—Å–ª–æ —Ç–æ—á–µ–∫ r = {}".format(r))
    print ("–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç D = {}".format(D))
    print ("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è z = {}".format(z))
    
    # –≤—ã—á—Å–ª–µ–Ω–∏–µ –ø–æ–ª–∏–Ω–æ–º–∞ –ì–∏–ª—å–±–µ—Ä—Ç–∞ –¥–ª—è D 
    H = hilbert_class_polynomial(-D)
    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ p
    K = GF(p)
    # –∫–æ—Ä–Ω–∏ –ø–æ–ª–∏–Ω–æ–º–∞ –ì–∏–ª—å–±–µ—Ä—Ç–∞
    rg = H.roots(ring = K, multiplicities = False)
    if (rg == []):
        return 0, 0, 0
    j = rg[0]
    print ("j-–∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç j = {}".format(j))
    
    # —Ä–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏—ç–Ω—Ç–æ–≤ –∫—Ä–∏–≤–æ–π –≤ –∫–æ–Ω–µ—á–Ω–æ–º –ø–æ–ª–µ K
    A = K(3*j / (1728 - j))
    B = K(2*j / (1728 - j))
    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–≤–æ–π –Ω–∞–¥ –∫–æ–Ω–µ—á–Ω—ã–º –ø–æ–ª–µ–º K
    C = EllipticCurve(K, [A,B])
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ —ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–π –∫—Ä–∏–≤–æ–π
    if gcd(C.order(), r) == 1:
        return 0, 0, 0
    print ("{}".format(C))
    
    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ–ª—è
    EK.<t> = GF(p**k)
    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–≤–æ–π –Ω–∞–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–æ–Ω–µ—á–Ω—ã–º –ø–æ–ª–µ–º
    EC = EllipticCurve(EK, [A, B])
    if gcd(EC.order(), r**2) == 1:
        return 0, 0, 0
    print ("{}".format(EC))
    return C, EC, r    

# –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É P –ø–æ—Ä—è–¥–∫–∞ r –Ω–∞ –∫—Ä–∏–≤–æ–π E(F_p)
def GetP(C, EC, r):
    P = C.random_point()
    while (True):
        if (P.order() == r):
            break
        P = C.random_point()
    P = EC(P[0], P[1], P[2])
    return P

# –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É PK –ø–æ—Ä—è–¥–∫–∞ r –Ω–∞ –∫—Ä–∏–≤–æ–π E(F_q), q = p^k
def GetPK(EC, r):
    PK = EC.random_point()
    while (True):
        PK *= (EC.order() // r ** 2)
        if PK.order() == r:
            break
        PK = EC.random_point()
    return PK

# –≤—ã—á–∏—Å–ª—è–µ–º –≥—Ä—É–ø–ø—É –∫—Ä—É—á–µ–Ω–∏—è
def TorsionSubgroup(P, PK, EZ, r):
    tor = []
    PK_1 = []
    # –¥–æ–±–∞–≤–ª—è–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ-—É–¥–∞–ª–µ–Ω–Ω—É—é —Ç–æ—á–∫—É
    PK_1.append(EZ) 
    # —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞–µ–º –ø–æ —Ñ–æ—Ä–º—É–ª–µ ùëéùëÉ+ùëèùëÉùêæ,0‚â§ùëé,ùëè‚â§ùëü‚àí1
    for j in range (1, r):
            PK_j = j * PK
            PK_1.append(PK_j)
    tor.append(PK_1)
    for i in range (1, r):
        P_sum = []
        P_i = i * P
        P_sum.append(P_i)
        for j in range (1, r):
            PK_j = j * PK
            P_sum.append(P_i + PK_j)
        tor.append(P_sum)
    # –ø–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –∫—Ä—É—á–µ–Ω–∏—è
    l = 0
    for i in range (0, r):
        l +=  len(tor[i])
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –∫—Ä—É—á–µ–Ω–∏—è: {}".format(l))
    return tor

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –±–∏–ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏ –∏ –∑–Ω–∞–∫–æ–ø–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –í–µ–π–ª—è
def WeilPairing(tor, r):
    print("\n_______–°–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –í–µ–π–ª—è_______")
    S1 = tor[0][1]
    S2 = tor[0][2]
    T1 = tor[1][0]
    T2 = tor[2][0]
    
    # –±–∏–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å e(S1 + S2, T) == e(S1, T) e(S2, T); e(S, T1 + T2) == e(S, T1) e(S, T2); 
    S = S1 + S2
    eSST = S.weil_pairing(T1, r)
    eST = S1.weil_pairing(T1, r)
    eTS = S2.weil_pairing(T1, r)
    ee = eST * eTS
    
    T = T1 + T2
    eSST1 = T.weil_pairing(S1, r)
    eST1 = T1.weil_pairing(S1, r)
    eTS1 = T2.weil_pairing(S1, r)
    ee1 = eST1 * eTS1
        
    if(eSST == ee and eSST1 == ee1):
        print("\n–ë–∏–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å –ø–æ –í–µ–π–ª—é: e(S1 + S2, T) == e(S1, T) e(S2, T); e(S, T1 + T2) == e(S, T1) e(S, T2);")
    print("e(S1 + S2, T) = {}".format(eSST),"\ne(S1, T) = {}".format(eST),"\ne(S2, T) = {}".format(eTS),"\ne(S1, T) e(S2, T) = {}".format(ee))
    print("\ne(S, T1 + T2) = {}".format(eSST1),"\ne(S, T1) = {}".format(eST1),"\ne(S, T2) = {}".format(eTS1),"\ne(S, T1) e(S, T2) = {}".format(ee1))
   
    # –∑–Ω–∞–∫–æ–ø–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å e(S, S) = 1
    sm = 0
    lenT = 0
    for i in range (0, r):
        for j in range (0, r):
            S = tor[i][j]
            eSS = S.weil_pairing(S, r)
            lenT += 1
            if(eSS == 1):
                sm += 1
    if(sm == lenT):
        print("\n–ó–Ω–∞–∫–æ–ø–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –í–µ–π–ª—é: e(S, S) = 1 –¥–ª—è –≤—Å–µ—Ö S ‚àà E[r]")
    #print("sm = ", sm)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –±–∏–ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏ –∏ –∑–Ω–∞–∫–æ–ø–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –¢–µ–π—Ç–∞
def TatePairing(tor, r, k):
    print("\n\n_______–°–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –¢–µ–π—Ç–∞_______")
    S1 = tor[0][1]
    S2 = tor[0][2]
    T1 = tor[1][0]
    T2 = tor[2][0]
    
    # –±–∏–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å e(S1 + S2, T) == e(S1, T) e(S2, T); e(S, T1 + T2) == e(S, T1) e(S, T2); 
    S = S1 + S2
    eSST = S.tate_pairing(T1, r, k)
    eST = S1.tate_pairing(T1, r, k)
    eTS = S2.tate_pairing(T1, r, k)
    ee = eST * eTS
    
    T = T1 + T2
    eSST1 = T.tate_pairing(S1, r, k)
    eST1 = T1.tate_pairing(S1, r, k)
    eTS1 = T2.tate_pairing(S1, r, k)
    ee1 = eST1 * eTS1
        
    if(eSST == ee and eSST1 == ee1):
        print("\n–ë–∏–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å –ø–æ –¢–µ–π—Ç—É: e(S1 + S2, T) == e(S1, T) e(S2, T); e(S, T1 + T2) == e(S, T1) e(S, T2);")
    print("e(S1 + S2, T) = {}".format(eSST),"\ne(S1, T) = {}".format(eST),"\ne(S2, T) = {}".format(eTS),"\ne(S1, T) e(S2, T) = {}".format(ee))
    print("\ne(S, T1 + T2) = {}".format(eSST1),"\ne(S, T1) = {}".format(eST1),"\ne(S, T2) = {}".format(eTS1),"\ne(S, T1) e(S, T2) = {}".format(ee1))
   
    # –∑–Ω–∞–∫–æ–ø–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å e(S, S) = 1
    sm = 0
    lenT = 0
    for i in range (0, r):
        for j in range (0, r):
            S = tor[i][j]
            eSS = S.tate_pairing(S, r, k)
            lenT += 1
            if(eSS == 1):
                sm += 1
    if(sm == lenT):
        print("\n–ó–Ω–∞–∫–æ–ø–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –¢–µ–π—Ç—É: e(S, S) = 1 –¥–ª—è –≤—Å–µ—Ö S ‚àà E[r]\n")
    else:
        print("\n–ó–Ω–∞–∫–æ–ø–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –¢–µ–π—Ç—É –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: sm = ", sm)
        print("")

def simplehash(mes, i):
    s = 0
    for y in mes:
        s += ord(y) + 1# –æ—Ä–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞
    return s % i  

def IntoPoint(EC, mess):
    p = int(EK.base_field().characteristic()) # —Ä- –º–æ–¥—É–ª—å, –ê, –í
    A = int(EK.a4())
    B = int(EK.a6())
    K = GF(p)
    for i in range(2, p):
        # —Ö—ç—à-—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        h = simplehash(mess, i)
        # —Å–∏–º–≤–æ–ª –õ–µ–∂–∞–Ω–¥—Ä–∞ ((h**3 + A*h + B)/p)
        t = kronecker_symbol(h**3 + A*h + B, p)
    # y^2 = b mod(p)? –µ—Å–ª–∏ –¥–∞ —Ç–æ (t/p)=1
        if t == 1:
            var('y')
            UR=h**3+A*h+B==y**2
            print("UR={}".format(UR))
            y_r = UR.roots(ring=K,multiplicities=False)
            y_res =y_r[randint(0,p)%len(y_r)]
    # –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ –æ–¥–∏–Ω –∏–∑ –∫–æ—Ä–Ω–µ–π
            try:
                P = EK([h, y_res])
                return P
            except:
                continue
    P0 = EC([0,1,0])
    return P0 

# –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏
def KeyGeneration(tor, r):
    # —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    x = randint(1, r - 1)
    # —Å–ª—É—á–∞–π–Ω–∞—è  —Ç–æ—á–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã –∫—Ä—É—á–µ–Ω–∏—è
    i, j = randint(0, r - 1), randint(0, r - 1)
    Q = tor[i][j] 
    # –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–ª—é—á
    V = x * Q 
    return x, Q, V

# –≤–ª–æ–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ x-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É —Ç–æ—á–∫–∏
def MessToPoint(EC, mess):
    p = int(EC.base_field().characteristic())
    A = int(EC.a4())
    B = int(EC.a6())
    K = GF(p)
    #print ('p = {}'.format(p))
    #print ('A = {}'.format(A))
    #print ('B = {}'.format(B))
    for i in range(2, p):
        # —Ö—ç—à-—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        h = simplehash(mess, i)
        # —Å–∏–º–≤–æ–ª –õ–µ–∂–∞–Ω–¥—Ä–∞ (h**3 + A*h + B/p)
        t = kronecker_symbol(h**3 + A * h + B, p)
        if t == 1:
            # —Ä–µ—à–∞–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ
            var('y')
            UR = h**3 + A * h + B == y**2
            y_r = UR.roots(ring = K, multiplicities = False)
            # –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ –æ–¥–∏–Ω –∏–∑ –∫–æ—Ä–Ω–µ–π
            res = y_r[randint(0,p) % len(y_r)]
            try:
                P = EC([h, res])
                # print ('P = {}'.format(P))
                return P
            except:
                continue
    P0 = EC([0,1,0])
    return P0 

# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
def Signing(x, EC, mess):
    M = MessToPoint(EC, mess)
    Y = x * M  
    return Y[0]

def Check (EC, mess, Q, V, S, r):
    print ('–°–æ–æ–±—â–µ–Ω–∏–µ: {}'.format(mess))
    M = MessToPoint(EC, mess)
    print ('M = {}'.format(M))
    print ('S = {}'.format(S))

    e1 = Q.weil_pairing(S, r)
    e2 = V.weil_pairing(M, r)
    print("e1 = {}".format(e1),"\ne2 = {}".format(e2))
    
    if (e1 == e2) or (e1 == e2^(-1)):
        print ('–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å—å\n')
    else:
        print ('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å—å\n')

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
def Verification(mess, EC, tor, r, Xs, Q, V):
    p = EC.base_field().characteristic()
    A = EC.a4()
    B = EC.a6()
    KT = GF(p)
    
    Ys = KT(Xs**3 + A*Xs + B)
    Ys = KT(sqrt(Ys))
    try:       
        S = EC([Xs, Ys])
    except:
        Ys = KT(-Ys)
        S = EC([Xs, Ys])      
    Check (EC, mess, Q, V, S, r)
    Check (EC, "error", Q, V, S, r)
    
# –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥–ø–∏—Å—å –Ω–∞ –±–∏–ª–∏–Ω–µ–π–Ω—ã—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö        
def ShortSignatureWP(EC, tor, r, mess):
    x, Q, V = KeyGeneration(tor, r)
    S = Signing(x, EC, mess)
    Verification(mess, EC, tor, r, S, Q, V)
          
def main():    
    # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–∏
    z = 2
    # —Å—Ç–µ–ø–µ–Ω—å –≤–ª–æ–∂–µ–Ω–∏—è
    k = 6
    while True:
        C, EC, r = EllipticCurveGeneration(z, k)
        if r == 0:
            print ('Error')
        break
    P = GetP(C, EC, r)
    print("P = {}".format(P))
    PK = GetPK(EC, r)
    print("PK = {}".format(PK))
    tor = TorsionSubgroup(P, PK, EC(0), r)
    WeilPairing(tor, r)
    TatePairing(tor, r, k)
    mess = "Hello"
    ShortSignatureWP(EC, tor, r, mess)
    
if __name__ == "__main__":
    main()    